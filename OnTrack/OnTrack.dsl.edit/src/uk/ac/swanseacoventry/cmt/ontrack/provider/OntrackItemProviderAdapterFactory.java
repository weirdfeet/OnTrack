/**
 */
package uk.ac.swanseacoventry.cmt.ontrack.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.swanseacoventry.cmt.ontrack.util.OntrackAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OntrackItemProviderAdapterFactory extends OntrackAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OntrackItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.ControlTableItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTableItemItemProvider controlTableItemItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.ControlTableItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTableItemAdapter() {
		if (controlTableItemItemProvider == null) {
			controlTableItemItemProvider = new ControlTableItemItemProvider(this);
		}

		return controlTableItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Crossing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CrossingItemProvider crossingItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Crossing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCrossingAdapter() {
		if (crossingItemProvider == null) {
			crossingItemProvider = new CrossingItemProvider(this);
		}

		return crossingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.DirectedTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectedTrackItemProvider directedTrackItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.DirectedTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectedTrackAdapter() {
		if (directedTrackItemProvider == null) {
			directedTrackItemProvider = new DirectedTrackItemProvider(this);
		}

		return directedTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Entrance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntranceItemProvider entranceItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Entrance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntranceAdapter() {
		if (entranceItemProvider == null) {
			entranceItemProvider = new EntranceItemProvider(this);
		}

		return entranceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Exit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExitItemProvider exitItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Exit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExitAdapter() {
		if (exitItemProvider == null) {
			exitItemProvider = new ExitItemProvider(this);
		}

		return exitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.NewCrossing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewCrossingItemProvider newCrossingItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.NewCrossing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewCrossingAdapter() {
		if (newCrossingItemProvider == null) {
			newCrossingItemProvider = new NewCrossingItemProvider(this);
		}

		return newCrossingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.NewPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewPointItemProvider newPointItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.NewPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewPointAdapter() {
		if (newPointItemProvider == null) {
			newPointItemProvider = new NewPointItemProvider(this);
		}

		return newPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.NewTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewTrackItemProvider newTrackItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.NewTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewTrackAdapter() {
		if (newTrackItemProvider == null) {
			newTrackItemProvider = new NewTrackItemProvider(this);
		}

		return newTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Point} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointItemProvider pointItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Point}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointAdapter() {
		if (pointItemProvider == null) {
			pointItemProvider = new PointItemProvider(this);
		}

		return pointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.ReleaseTableItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseTableItemItemProvider releaseTableItemItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.ReleaseTableItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReleaseTableItemAdapter() {
		if (releaseTableItemItemProvider == null) {
			releaseTableItemItemProvider = new ReleaseTableItemItemProvider(this);
		}

		return releaseTableItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Signal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalItemProvider signalItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Signal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalAdapter() {
		if (signalItemProvider == null) {
			signalItemProvider = new SignalItemProvider(this);
		}

		return signalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.SubTrackPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubTrackPlanItemProvider subTrackPlanItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.SubTrackPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubTrackPlanAdapter() {
		if (subTrackPlanItemProvider == null) {
			subTrackPlanItemProvider = new SubTrackPlanItemProvider(this);
		}

		return subTrackPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Terminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalItemProvider terminalItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Terminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminalAdapter() {
		if (terminalItemProvider == null) {
			terminalItemProvider = new TerminalItemProvider(this);
		}

		return terminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.TopoRoute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopoRouteItemProvider topoRouteItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.TopoRoute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopoRouteAdapter() {
		if (topoRouteItemProvider == null) {
			topoRouteItemProvider = new TopoRouteItemProvider(this);
		}

		return topoRouteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.Track} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrackItemProvider trackItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.Track}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrackAdapter() {
		if (trackItemProvider == null) {
			trackItemProvider = new TrackItemProvider(this);
		}

		return trackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.swanseacoventry.cmt.ontrack.TrackPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrackPlanItemProvider trackPlanItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.swanseacoventry.cmt.ontrack.TrackPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrackPlanAdapter() {
		if (trackPlanItemProvider == null) {
			trackPlanItemProvider = new TrackPlanItemProvider(this);
		}

		return trackPlanItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (connectorItemProvider != null) connectorItemProvider.dispose();
		if (controlTableItemItemProvider != null) controlTableItemItemProvider.dispose();
		if (crossingItemProvider != null) crossingItemProvider.dispose();
		if (directedTrackItemProvider != null) directedTrackItemProvider.dispose();
		if (entranceItemProvider != null) entranceItemProvider.dispose();
		if (exitItemProvider != null) exitItemProvider.dispose();
		if (newCrossingItemProvider != null) newCrossingItemProvider.dispose();
		if (newPointItemProvider != null) newPointItemProvider.dispose();
		if (newTrackItemProvider != null) newTrackItemProvider.dispose();
		if (pointItemProvider != null) pointItemProvider.dispose();
		if (releaseTableItemItemProvider != null) releaseTableItemItemProvider.dispose();
		if (signalItemProvider != null) signalItemProvider.dispose();
		if (subTrackPlanItemProvider != null) subTrackPlanItemProvider.dispose();
		if (terminalItemProvider != null) terminalItemProvider.dispose();
		if (topoRouteItemProvider != null) topoRouteItemProvider.dispose();
		if (trackItemProvider != null) trackItemProvider.dispose();
		if (trackPlanItemProvider != null) trackPlanItemProvider.dispose();
	}

}
