import "OnTrack.etl";

pre {
	var trackplan = safetrack!TrackPlan.all().first();
	var subplan = trackplan.selectedSubTrackPlan;
	var plan;
	if (subplan.isDefined()) plan = subplan;
	else plan = trackplan;
	
	// Main B Machine
	new BMachine!Machine;
	BMachine!Machine.all().first().hasSets.clear();
	BMachine!Machine.all().first().hasProperties.clear();

	// Property normalTable
	var entryTable = newBProperty("entryTable");

	// Property normalTable
	var normalTable = newBProperty("normalTable");
	
	// Property reverseTable
	var reverseTable = newBProperty("reverseTable");
	
	// Property clearTable
	var clearTable = newBProperty("clearTable");
	
	// Property lockTable
	var directedTable = newBProperty("directedTable");
}

//////// Transformation Rules ////////

// Add normal points to normalTable and lockTable
rule transformNormalTable
transform r : safetrack!ControlTableItem
to pe : BMachine!PropElement {

	// only transform if route is in control table and has normal points
	// guard : r.signal.isDefined()
	guard : plan.controlTable.includes(r) 
	
	// delete auto-generated BMachine!PropElement as we may want more than one
	// bit of a bodge!
	delete pe;
	
	// for every normal point
	for (p in r.normals) {
	
		// create new property element
		var pe = new BMachine!PropElement;
		
		// add to both normalTable
		normalTable.hasPropElements.add(pe);
	
		// create new domain element
		newBDomainElement(r.route, pe);
	
		// create new range element
		newBRangeElement(p.name, pe);
	}
}

// Add reverse points to reverseTable and lockTable
rule transformReverseTable
transform r : safetrack!ControlTableItem
to pe : BMachine!PropElement {

	guard : plan.controlTable.includes(r) 

	// delete auto-generated BMachine!PropElement as we may want more than one
	// bit of a bodge!!
	delete pe;
	
	// for every reverse point
	for (p in r.reverses) {
	
		// create new property element
		var pe = new BMachine!PropElement;
		
		// add to both reverseTable and lockTable
		reverseTable.hasPropElements.add(pe);

		// create new domain element
		newBDomainElement(r.route, pe);
	
		// create new range element
		newBRangeElement(p.name, pe);
	}
}

// Add clear tracks to clearTable
rule transformClearTable
transform r : safetrack!ControlTableItem
to pe : BMachine!PropElement {

	// only transform if route is in control table
	guard : plan.controlTable.includes(r) and r.signal.isDefined()
	
	delete pe;
	
	// for every reverse point
	for (t in r.clears) {
	
		// create new property element
		var pe = new BMachine!PropElement;
		
		// add to both reverseTable and lockTable
		clearTable.hasPropElements.add(pe);

		// create new domain element
		newBDomainElement(r.route, pe);
	
		// create new range element
		newBRangeElement(t.getName(), pe);
	}

}

rule transformDirectedTable
transform r : safetrack!ControlTableItem
to pe : BMachine!PropElement {

	// only transform if route is in control table
	guard : plan.controlTable.includes(r) and r.signal.isDefined()
	
	delete pe;
	
	// for every reverse point
	for (t in r.directions) {
	
		// create new property element
		var pe = new BMachine!PropElement;
		
		// add to both reverseTable and lockTable
		directedTable.hasPropElements.add(pe);

		// create new domain element
		newBDomainElement(r.route, pe);
	
		// create new range element
		newBRangeElement(t.track.getName(), pe);
		if (t.connector = t.track.c1)
			newBRangeElement(t.track.c2.id.toString(), pe);
		else
			newBRangeElement(t.track.c1.id.toString(), pe);
		newBRangeElement(t.connector.id.toString(), pe);
	}

}


rule transformEntryTable
transform e : safetrack!Entrance
to p : BMachine!PropElement {

	guard : plan.entrances.includes(e)
	
	var c1 = e.connector;
	for(t in c1.track1s.includingAll(c1.track2s)){
		if (not(plan.tracks.includes(t))) continue;
		var c2;
		if (t.c1==c1) c2 = t.c2; else c2 = t.c1;
		var found = false;
		if (trackplan.overlapped)
			for(s in plan.signals) {
				if (s.track==t and s.connector==c2) {
					found = true;
					break;
				}
			}
		if (found) {
			for(t1 in c2.track1s.includingAll(c2.track2s).including(t)){
				var pe = newBPropElement();
				newBDomainElement(t.getName(), pe);
				newBDomainElement(c1.id.toString(), pe);
				newBDomainElement(c2.id.toString(), pe);
				//
				newBRangeElement(t1.getName(), pe);
				//
				entryTable.hasPropElements.add(pe);
			}
		}
		else {
			var pe = newBPropElement();
			newBDomainElement(t.getName(), pe);
			newBDomainElement(c1.id.toString(), pe);
			newBDomainElement(c2.id.toString(), pe);
			//
			newBRangeElement(t.getName(), pe);
			//
			entryTable.hasPropElements.add(pe);
		}
	}
}
