TrainID = {1,2}

-- id : train id
-- cp : current pos
-- pp : previous pos
TrainBehave(id,cp,pp) =
  (member(OFFTRACK,next(cp,pp)) and member(cp,ExitTrack) &
    move.cp.OFFTRACK -> TrainBehave(id,OFFTRACK,OFFTRACK))
  []
  ([] np : next(cp,pp) @ np!=OFFTRACK & move.cp.np -> TrainBehave(id,np,cp))
  []
  ([] np : next(cp,pp) @ np!=OFFTRACK and not(empty(atSignal(cp.np))) & hangMove.cp.np -> STOP)
  []
  (member(OFFTRACK,next(cp,pp)) and member(cp,Terminal) & turnAround.cp -> TrainBehave(id,cp,OFFTRACK))
  []
  ([] rID : RouteID @ not(member(cp,clearTable(rID))) &
    setRoute.rID -> TrainBehave(id,cp,pp))
  []
  ([] rID : RouteID @ signalAt1(signal(rID))!=cp or signalAt2(signal(rID))==pp &
    cancelRoute.rID -> TrainBehave(id,cp,pp))

Trains = [| {| setRoute, cancelRoute |} |] id : TrainID @ TrainBehave(id,OFFTRACK,OFFTRACK)
TrainsAlpha = {| setRoute, cancelRoute, move, hangMove, turnAround |}
